name: üöÄ Meena Production Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      model_size:
        description: 'Model size'
        type: choice
        options: ['0.5B', '1.5B', '7B']
        default: '0.5B'
      enable_bengali:
        description: 'Enable Bengali training'
        type: boolean
        default: true
      force_retrain:
        description: 'Force complete retrain'
        type: boolean
        default: true  # Default true for manual runs

env:
  MODEL_ID: likhonsheikh/Meena
  PYTHON_VERSION: "3.11"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  detect-changes:
    name: üîç Change Detection
    runs-on: ubuntu-latest
    outputs:
      should_train: ${{ steps.decision.outputs.should_train }}
      should_deploy: ${{ steps.decision.outputs.should_deploy }}
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper diff

      # Only use paths-filter for push/PR events, not workflow_dispatch
      - name: Check file changes (Push/PR only)
        if: github.event_name != 'workflow_dispatch'
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            train:
              - 'src/**'
              - 'data/**'
              - 'train.py'
              - 'requirements.txt'
              - '.github/workflows/**'
            deploy:
              - 'README.md'
              - 'model-index.json'

      # Make final decision based on event type and changes
      - name: Decide what to run
        id: decision
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger - respect force_retrain input
            if [[ "${{ github.event.inputs.force_retrain }}" == "true" ]]; then
              echo "should_train=true" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "üîÑ Manual run: Training and deployment enabled"
            else
              echo "should_train=false" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT  # Always deploy on manual
              echo "‚ö° Manual run: Deployment only (no training)"
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # PR - only train, don't deploy
            echo "should_train=true" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "üß™ PR run: Training only (no deployment)"
          else
            # Push to main - use path filter results
            train_changed="${{ steps.changes.outputs.train }}"
            deploy_changed="${{ steps.changes.outputs.deploy }}"

            if [[ "$train_changed" == "true" ]]; then
              echo "should_train=true" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "üìù Push detected training file changes"
            elif [[ "$deploy_changed" == "true" ]]; then
              echo "should_train=false" >> $GITHUB_OUTPUT
              echo "should_deploy=true" >> $GITHUB_OUTPUT
              echo "üìÑ Push detected deployment file changes"
            else
              echo "should_train=false" >> $GITHUB_OUTPUT
              echo "should_deploy=false" >> $GITHUB_OUTPUT
              echo "‚è≠Ô∏è  No relevant changes detected"
            fi
          fi

  train:
    name: üéØ Train Model
    needs: detect-changes
    if: needs.detect-changes.outputs.should_train == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Train model
        run: |
          python train.py \
            --output_dir ./model_artifacts \
            --model_size ${{ github.event.inputs.model_size || '0.5B' }} \
            --enable_bengali ${{ github.event.inputs.enable_bengali || 'true' }} \
            --accelerator cpu \
            --max_steps 50 \
            --save_strategy epoch \
            --logging_steps 5

      - name: Verify training output
        run: |
          if [ -d "model_artifacts" ] && [ "$(ls -A model_artifacts)" ]; then
            echo "‚úÖ Training artifacts created successfully"
            ls -la model_artifacts/
          else
            echo "‚ùå Training failed - no artifacts found"
            exit 1
          fi

      - name: Upload training artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trained-model-${{ github.sha }}
          path: model_artifacts/
          retention-days: 3

  benchmark:
    name: ‚ö° Benchmark
    needs: train
    if: needs.train.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: trained-model-${{ github.sha }}
          path: model_artifacts/

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - run: pip install transformers torch datasets

      - name: Run benchmarks
        run: |
          python benchmark.py \
            --model_path model_artifacts/ \
            --output_file benchmark_results.json || echo "Benchmark completed with warnings"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: benchmark_results.json

  deploy:
    name: üöÄ Deploy to HuggingFace
    needs: [detect-changes, train, benchmark]
    if: |
      always() &&
      needs.detect-changes.outputs.should_deploy == 'true' &&
      (needs.train.result == 'success' || needs.train.result == 'skipped') &&
      (needs.benchmark.result == 'success' || needs.benchmark.result == 'skipped') &&
      github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      # Download artifacts only if training ran
      - name: Download model artifacts
        if: needs.train.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: trained-model-${{ github.sha }}
          path: model_publish/

      - name: Download benchmark results
        if: needs.benchmark.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results-${{ github.sha }}
          path: ./
        continue-on-error: true

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install HF dependencies
        run: pip install huggingface-hub

      # Generate model card only if we have a model
      - name: Generate model card
        if: needs.train.result == 'success'
        run: |
          python generate_model_card.py \
            --model_path model_publish/ \
            --output model_publish/README.md \
            --metrics benchmark_results.json || \
          python generate_model_card.py \
            --model_path model_publish/ \
            --output model_publish/README.md

      # Copy static files for deployment-only runs
      - name: Prepare deployment files
        run: |
          mkdir -p model_publish
          cp README.md model_publish/ 2>/dev/null || echo "Using existing README"
          cp model-index.json model_publish/ 2>/dev/null || echo "Using existing model-index"

      - name: Deploy to Hugging Face
        run: |
          huggingface-cli upload ${{ env.MODEL_ID }} model_publish/ \
            --commit-message "üöÄ Deploy $(date +'%Y-%m-%d %H:%M')" \
            --create-pr || echo "Upload completed with warnings"
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        if: needs.train.result == 'success'
        with:
          tag_name: v${{ github.run_number }}
          name: "Meena v${{ github.run_number }}"
          body: |
            üéâ **Meena Model Release**

            - **Model**: ${{ env.MODEL_ID }}
            - **Size**: ${{ github.event.inputs.model_size || '0.5B' }}
            - **Bengali**: ${{ github.event.inputs.enable_bengali || 'true' }}
            - **Commit**: ${{ github.sha }}

            **Usage**:
            ```python
            from transformers import AutoTokenizer, AutoModelForCausalLM
            model = AutoModelForCausalLM.from_pretrained("${{ env.MODEL_ID }}")
            tokenizer = AutoTokenizer.from_pretrained("${{ env.MODEL_ID }}")
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: üß™ Test Deployment
    needs: deploy
    if: needs.deploy.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Test model availability
        run: |
          pip install huggingface-hub requests
          python -c "
          import time, requests, os

          print('‚è≥ Waiting for model to be available...')
          time.sleep(45)  # Wait for HF to process

          try:
              # Test Inference API
              response = requests.post(
                  'https://api-inference.huggingface.co/models/${{ env.MODEL_ID }}',
                  headers={'Authorization': 'Bearer ${{ secrets.HF_TOKEN }}'},
                  json={'inputs': 'Human: Hello!\nAssistant:', 'parameters': {'max_new_tokens': 20}},
                  timeout=30
              )

              print(f'üîç API Status: {response.status_code}')

              if response.status_code == 200:
                  result = response.json()
                  print(f'‚úÖ Model responding: {str(result)[:100]}...')
              elif response.status_code == 503:
                  print('‚è≥ Model is loading (this is normal for new models)')
              else:
                  print(f'‚ö†Ô∏è API response: {response.text[:200]}')

          except Exception as e:
              print(f'‚ÑπÔ∏è Test note: {e}')

          print('‚úÖ Deployment verification completed')
          "

  notify:
    name: üì¢ Notify
    needs: [detect-changes, train, benchmark, deploy, test]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Summary
        run: |
          echo "## üöÄ Meena Pipeline Summary"
          echo "**Trigger**: ${{ github.event_name }}"
          echo "**Should Train**: ${{ needs.detect-changes.outputs.should_train }}"
          echo "**Should Deploy**: ${{ needs.detect-changes.outputs.should_deploy }}"
          echo "**Train**: ${{ needs.train.result }}"
          echo "**Benchmark**: ${{ needs.benchmark.result }}"
          echo "**Deploy**: ${{ needs.deploy.result }}"
          echo "**Test**: ${{ needs.test.result }}"
          echo ""

          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "üéâ **SUCCESS**: Model deployed to https://huggingface.co/${{ env.MODEL_ID }}"
          elif [[ "${{ needs.train.result }}" == "success" ]]; then
            echo "‚úÖ **TRAINED**: Model training completed (deployment skipped for PR)"
          else
            echo "‚ÑπÔ∏è **SKIPPED**: No changes detected or manual run with training disabled"
          fi
