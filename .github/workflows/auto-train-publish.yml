name: Auto Train & Publish Model

on:
  push:
    branches: [ "main" ]
    paths:
      - 'data/**'
      - 'src/**'
      - 'train.py'
      - '.github/workflows/auto-train-publish.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 0' # weekly; change as desired

permissions:
  contents: read
  id-token: write

env:
  MODEL_ID: "your-username/auto-model"
  OUTPUT_DIR: "model_out"

jobs:
  train:
    runs-on: ubuntu-latest
    # For production use, create a 'prod' environment in repo settings
    # and uncomment the line below.
    # environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run training (placeholder)
        id: train
        run: |
          python train.py --output_dir $OUTPUT_DIR

      - name: Upload model artifact
        uses: actions/upload-artifact@v4
        with:
          name: model-files
          path: ${{ env.OUTPUT_DIR }}

  publish:
    needs: train
    runs-on: ubuntu-latest
    # Using if: always() as requested, to run even if training fails.
    # This might be useful for notifications or publishing failure status.
    if: always()
    # For production use, create a 'prod' environment in repo settings
    # and uncomment the line below.
    # environment: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download model artifact
        uses: actions/download-artifact@v4
        with:
          name: model-files
          path: model_publish

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Publish to Hugging Face
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          MODEL_ID: ${{ env.MODEL_ID }}
        run: |
          # add the README and model-index.json next to model_publish (if not included in artifact)
          cp README.md model_publish/ || true
          cp model-index.json model_publish/ || true
          python publish.py --model-dir model_publish --model-id "${MODEL_ID}" --readme model_publish/README.md --index model_publish/model-index.json
